# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
name: Build
on:
  workflow_call:
    inputs:
      ref:
        description: |
          The Git reference to operate on.
        type: string
        required: true
      build-type:
        description: |
          The type of build to create.

          Valid options are:

           * `production` for a production build.
           * `development` for a development build.

          Defaults to `production`.
        type: string
        required: false
        default: production
      upload-artifacts:
        description: |
          Whether to upload artifacts.

          Defaults to `true`.
        type: boolean
        required: false
        default: true
      artifact-retention-duration:
        description: |
          The length of time, in days, to retain uploaded artifacts for.

          If set to `0`, defaults to the value configured for the repository.

          Defaults to `0`.
        type: number
        required: false
        default: 0
    outputs:
      artifact-id:
        description: |
          The ID of the artifact generated by the workflow, if any.
        value: ${{jobs.build.outputs.artifact-id}}
      artifact-name:
        description: |
          The name of the artifact generated by the workflow, if any.
        value: ${{jobs.build.outputs.artifact-name}}
      artifact-url:
        description: |
          The download URL of the artifact generated by the workflow, if any.
        value: ${{jobs.build.outputs.artifact-url}}
    secrets:
      github-token:
        description: |
          The token to use for making authenticated requests to GitHub APIs.
        required: true
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    permissions:
      #-- To clone the repository
      contents: read
    outputs:
      artifact-id: ${{steps.upload-artifacts.outputs.artifact-id}}
      artifact-name: build-${{steps.map-build-type.outputs.build-type}}
      artifact-url: ${{steps.upload-artifacts.outputs.artifact-url}}
    steps:
      - id: checkout-repository
        name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{inputs.ref}}
          lfs: true
          submodules: recursive
          show-progress: true
          token: ${{secrets.github-token || secrets.GITHUB_TOKEN}}
      - id: setup-pnpm
        name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false
      - id: setup-nodejs
        name: Setup NodeJS
        uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc
          cache: pnpm
          cache-dependency-path: ./pnpm-lock.yaml
          token: ${{secrets.github-token || secrets.GITHUB_TOKEN}}
      - id: install-dependencies
        name: Install dependencies
        run: pnpm install
      - id: map-build-type
        name: Map build type
        run: |
          if [[ -z "${{inputs.build-type}}" ]]; then
            echo "::error file=.github\workflows\build.yaml,line=81,endLine=81,col=13,endColumn=234,title=Invalid Build Type::Invalid build type for build workflow. Was expecting one of 'development' or 'production' but got nothing!";
            exit 1;
          fi
          case "${{inputs.build-type}}" in
            "production")
              echo "build-type=prod" >> "$GITHUB_OUTPUT";
            ;;
            "development")
              echo "build-type=dev" >> "$GITHUB_OUTPUT";
            ;;
            *)
              echo "::error file=.github\workflows\build.yaml,line=91,endLine=91,col=15,endColumn=253,title=Invalid Build Type::Invalid build type for build workflow. Was expecting one of 'development' or 'production' but got '${{inputs.build-type}}'!";
              exit 1;
            ;;
          esac
      - id: build
        name: Build
        run: pnpm run build:${{steps.map-build-type.outputs.build-type}}
      - id: upload-artifacts
        name: Upload artifacts
        if: inputs.upload-artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{steps.map-build-type.outputs.build-type}}
          path: ./dist/
          retention-days: ${{inputs.artifact-retention-duration}}
          if-no-files-found: error
